# -*- coding: utf-8 -*-
"""Digit_Recognizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v1XLV4vMWNxxej95qUnvIWd1KWvQzIc1
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import seaborn as sns
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, classification_report

(X_train, y_train) , (X_test, y_test) = keras.datasets.mnist.load_data()

print(f"train data size {len(X_train)} which is  {round((len(X_train)/(len(X_train)+len(X_test)))*100)}% of total data")
print(f"test data size  {len(X_test)} which is  {round((len(X_test)/(len(X_train)+len(X_test)))*100)}%  of total data")

X_train.shape

for i in range(10):
  print(X_train[i].shape)

for i in range(10):
  plt.matshow(X_train[i])

for i in range(10):
  print(y_train[i])

X_train[0]

X_train = X_train / 255
X_test = X_test / 255

X_train[0]

for i in range(10):
  print(X_train[i].shape)

X_train_flattened = X_train.reshape(len(X_train), 28*28)
X_test_flattened = X_test.reshape(len(X_test), 28*28)

for i in range(10):
  print(X_train_flattened[i].shape)

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(150, activation='relu'),
    keras.layers.Dense(10, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=30)

model.evaluate(X_test,y_test)

y_pred = model.predict(X_test)

y_pred_labels = np.argmax(y_pred, axis=1)

conf_matrix = confusion_matrix(y_test, y_pred_labels)

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=range(10), yticklabels=range(10))
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()